= Interview-1

== 题目

一、假设公司的部门（Department）结构如下所示：

====
Android 研发部 -> 客户端研发部 -> 研发部 -> 公司
====

其中，-> 左侧是子（Child）部门，右侧是上级（Parent）部门，每个部门仅有一个上级部门。

1. 请设计关系型数据库表结构来存储上述部门结构。
2. 假设每名员工（Employee）仅属于某一个部门，请设计关系型数据库表结构来存储员工与部门的关系。
3. 编写程序实现：给定员工和部门，给出员工是否在这个部门。

------------------------------------------------------------------------------


二、现有资源（Resource）和权限（Permission）表，字段如下：

.资源表
|====
| 字段 | 含义
| id | 主键
| name | 资源名称
|====

.权限表
|====
| 字段 | 含义
| id | 主键
| resource_id | 资源 ID
| action | 操作
|====

1. 请设计关系型数据库表结构实现『为某个部门赋予权限』的需求。
2. 编写代码实现：给定员工和资源，查询其所具有该资源的权限列表。

三、假设每个部门（Department）有且仅有一个直属上级（Leader）字段，示例如下：

.部门表
|====
| 字段 | 含义
| id | 主键
| leader_id | Leader 的 ID
|====

1. 请设计关系型数据库表结构及编写相关代码，实现『赋予某个部门的所有上级具有某项权限』。
Tips：『部门的所有上级』是指部门及所有上级部门的直属上级的集合
2. 编写代码实现：给定员工和资源，查询其所具有的该资源的权限列表。

四、尝试使用 Ehcache 作为缓存组件优化上述需求中的查询性能。
	请注意设计缓存的更新策略。

=== 数据库字段命名规范

. 后缀与类型：
.. 主键、外键等使用 id 后缀，为整型。
.. 以 status、type 为后缀的字段名明确为整型，如枚举，按位存储等。
.. 后缀 time 为时间型、后缀 date 为日期型，譬如不要使用 start_date 作为一个时间型字段。
.. 以 key、title、label、name、description、uri、url 等为后缀的字段名明确为字符型。
. 不要使用对象名作为**简单类型**的字段名，为其增加可识别其类型的后缀，如：uri、key 等。
.. 头像不要使用 `avatar` 作为字段名，使用 `avatar_key` 或者 `avatar_url`。
.. 字段名 `user` 不知道是 `user_id` 还是 `user_name`。 

=== JAVA编码规范

代码必须符合 PEP8 规范，可忽略一下几项：`--ignore=W293,E402,E501,E251`。

* JavaBean对象封装一般用包装类即Integer类型 比如 private Integer id;
[ 
	我的选择是包装类好！原因如下： 
	1。所有的sql使用的默认类型都是null，如果你把POJO中的映射属性类型写为基本类型，
	当查找不到记录的时候，返回null赋给基本类型就会出错 
	2。包装类型都可以相应的转化为基本类型，如果你设置为基本类型比如int的话，
	它默认初始化为0，但0本身就代表着一种含义，如果为null的话，既好理解，
	也可以方便开发人员转化！而且很多xml配置中默认都是null。
]

* SELECT 查询语句 不用通配符  而是使用指定的列比如：
[

	private static  String columns = 
			"a.id, "
			+ "a.user_id AS 'userId',"   //
			+ "a.create_time AS 'createTime' ";

    String sql = "SELECT " + columns +" FROM sys_user a";
] 

* 数据库命名规范和JavaBean命名规范的统一. 
[
	private Integer userId;
	数据库的的列名就是 user_id
	//"a.user_id AS 'userId',"
]

