<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/util 
    http://www.springframework.org/schema/util/spring-util-4.0.xsd
	"
	default-lazy-init="true">
	
	<!-- Spring配置文件 -->
	
    <!-- 载入常用的配置 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 注解扫描所有包 -->
    <context:component-scan  base-package="com.ssf.bookshop.*">
       <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <context:annotation-config/>
    <tx:annotation-driven/>
    
	
	<!-- 原生数据源-数据源配置
	<bean id="dataSource" 
	class="org.springframework.jdbc.datasource.DriverManagerDataSource"> 
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	 -->
	 
	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource"
	class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driverClassName}" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" /> 
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <property name="filters" value="stat" /> 
	</bean>
	
	
	<aop:aspectj-autoproxy/>
	<!--  -->
	 
	<!-- 缓存配置开始 -->
	
	<!--扫描缓存注解
    <cache:annotation-driven cache-manager="cacheManager"/>
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager" ref="ehcacheManager"/>
    </bean>
    -->      
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
          p:configLocation="classpath:ehcache-local.xml"/>
	<!-- 缓存配置结束 -->
	
	
	
	<!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.ssf.bookshop.model"/>
        <property name="mapperLocations" value="classpath:/mappings/**/*.xml"/>
		
    </bean>
    
    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.ssf.bookshop.dao"/>
    </bean>
    
	
	<!-- 事务配置开始 -->
	<!-- 定义事务 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:advice id="txadvice" transaction-manager="transactionManager">
        <tx:attributes>
        
            <tx:method name="save*"     propagation="REQUIRED"/>
            <tx:method name="delete*"   propagation="REQUIRED"/>
            <tx:method name="update*"   propagation="REQUIRED"/>
            <tx:method name="transfer*" propagation="REQUIRED"/>
            <tx:method name="insert*"   propagation="REQUIRED"/>
            <tx:method name="change*"   propagation="REQUIRED"/>
            <tx:method name="do*"       propagation="REQUIRED"/>
            <!--  
            <tx:method name="*"         propagation="REQUIRED" read-only="true"/>
            -->
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
        <aop:pointcut
                expression="execution(* com.ssf.bookshop.service.impl.*.*(..))"
                id="txpointcut"/>
        <aop:advisor advice-ref="txadvice" pointcut-ref="txpointcut"/>
        
    </aop:config>
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	-->
	<!-- 事务配置结束 -->
	
	
	<!-- 自定义切面配置start 
    <bean id="proxy" class="com.ssf.bookshop.proxy.AOPProxy">
    </bean>
    
    <aop:config>
        <aop:pointcut id="pc"
           expression="execution(* com.ssf.bookshop.service.impl.*.*(..))"/>
        <aop:aspect ref="proxy">
            <aop:before pointcut-ref="pc" method="breforPerformance"/>
            <aop:after  pointcut-ref="pc" method="afterPerformance"/>
            <aop:around pointcut-ref="pc" method="aroundMethod"/>
        </aop:aspect>
    </aop:config>
   -->
    <!-- 自定义切面配置 end -->
    
    <!-- ##################Scheduler定时###################### -->
	<!--  
	<bean id="myjob" class="com.ssf.bookshop.jobtask.MyJobTaskImpl"/>
	<bean id="jobtask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="myjob" />
		<property name="targetMethod" value="timeTask"/>
	</bean>
	 
	<bean id="doTime" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobtask" />
		<property name="cronExpression">
			<value>0/5 * * * * ?</value>
		</property>
	</bean>
	
	<bean id="startQuertz" lazy-init="false" 
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="doTime" />
			</list>
		</property>
	 </bean>
	  -->
</beans>