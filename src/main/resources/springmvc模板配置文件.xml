<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
    	">
    	
    <!-- 启动扫描所有的controller -->
    <context:component-scan base-package="com.ssf.origin.web"/>

    <!-- 完成请求和注解POJO的映射 （可以直接注入JavaBean） -->
    <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
    </bean>
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
    </bean>
    
    <!-- 配置HibernateValidation验证框架 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
	    <property name="basename" value="validation"/>
	</bean>
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
         <property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
         <!-- 这里配置将使用上面国际化配置的messageSource -->
         <property name="validationMessageSource" ref="messageSource" />
     </bean> 
	<mvc:annotation-driven validator="validator" />
	
    <!-- web请求的拦截器
    <mvc:interceptors>
        <mvc:interceptor>
           <mvc:mapping path="/**" />
           <bean class="com.ssf.bookshop.proxy.MyInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    -->
    
    <!--  
    <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <mvc:exclude-mapping path="/register"/>
            <mvc:exclude-mapping path="/test/*"/>
            <mvc:exclude-mapping path="/login"/>
            <mvc:exclude-mapping path="/findPwd"/>
            <mvc:exclude-mapping path="/getTRegion"/>
            <mvc:exclude-mapping path="/getIndustry"/>
            <mvc:exclude-mapping path="/getTRegionByParentId"/>
            <mvc:exclude-mapping path="/getMessageCode"/>
            <mvc:exclude-mapping path="/listRecommend"/>
            <mvc:exclude-mapping path="/news/getNewsDetail"/>
            <mvc:exclude-mapping path="/css/ceos.css"/>
            <bean class="cn.kiiwii.framework.interceptor.MyInterceptor"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
    -->
    
    <!-- springmvc开启注解 -->
    <!--  <mvc:annotation-driven/> -->
    
    <mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/plain;charset=UTF-8</value>
						<value>text/html;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json; charset=UTF-8</value>
						<value>application/x-www-form-urlencoded; charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- velocity配置文件-->
	<bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">  
	    <property name="resourceLoaderPath" value="/WEB-INF/vm/" />  
	    <property name="configLocation" value="classpath:velocity.properties" />  
	</bean> 

    <!--jsp页面解析器，当Controller返回XXX字符串时，
    先通过拦截器，然后该类就会在/WEB-INF/views/目录下，查找XXX.jsp文件 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="order" value="1"/>
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
	
	<!-- velocity视图解析器 -->
    <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
        <property name="order" value="0"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="cache" value="true"/>
        <property name="prefix" value="/"/>
        <property name="suffix" value=".vm"/>
         <property name="layoutUrl" value="layout/default.vm"/>
        <property name="exposeSpringMacroHelpers" value="true" />
        <property name="dateToolAttribute" value="dateTool"/>
        <property name="numberToolAttribute" value="numberTool"/>
    </bean>
	  
    
   <!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<!---->  
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<prop key="java.lang.Throwable">error/500</prop>
			</props>
			</property>
	</bean>
	
	<!-- 支持Shiro对Controller的方法级AOP安全控制 end -->

    <!-- 多段文件上传 需要commons-fileupload.jar和commons-io.jar -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="1073741824"/>
    </bean>
    
    <!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
    <mvc:default-servlet-handler/>
</beans>
