<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	">

	<!-- 载入常用的配置 -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:druid.properties" />
	<!-- 注解扫描所有包 -->
	<context:component-scan base-package="cn.kiiwii.framework.spring.TestSpring.springwithjdbc.*" />

	<!-- 创建数据源 并且使用proxool数据库连接池-->
	<bean id="dataSourceOne" class="com.alibaba.druid.pool.DruidDataSource">

		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}"/>
		<property name="minIdle" value="${druid.minIdle}"/>
		<property name="maxActive" value="${druid.maxActive}"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

		<property name="validationQuery" value="${druid.validationQuery}"/>
		<property name="testWhileIdle" value="${druid.testWhileIdle}"/>
		<property name="testOnBorrow" value="${druid.testOnBorrow}"/>
		<property name="testOnReturn" value="${druid.testOnReturn}"/>

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}"/>

	</bean>
	
	<!-- 创建数据源 并且使用proxool数据库连接池-->
	<bean id="dataSourceTwo" class="com.alibaba.druid.pool.DruidDataSource">

		<property name="driverClassName" value="${jdbc2.driverClassName}"/>
		<property name="url" value="${jdbc2.url}"/>
		<property name="username" value="${jdbc2.username}"/>
		<property name="password" value="${jdbc2.password}"/>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}"/>
		<property name="minIdle" value="${druid.minIdle}"/>
		<property name="maxActive" value="${druid.maxActive}"/>

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}"/>

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

		<property name="validationQuery" value="${druid.validationQuery}"/>
		<property name="testWhileIdle" value="${druid.testWhileIdle}"/>
		<property name="testOnBorrow" value="${druid.testOnBorrow}"/>
		<property name="testOnReturn" value="${druid.testOnReturn}"/>

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="${druid.filters}"/>

	</bean>
	
	<bean id="dynamicDataSource" class="cn.kiiwii.framework.spring.TestSpring.springwithjdbc.dynamicdatasource.DynamicDataSource">  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <entry value-ref="dataSourceOne" key="dataSourceOne"></entry>  
                <entry value-ref="dataSourceTwo" key="dataSourceTwo"></entry>  
            </map>  
        </property>  
        <property name="defaultTargetDataSource" ref="dataSourceOne">  
        </property>  
    </bean>  

	<!-- 配置Jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dynamicDataSource"></property>
	</bean>


	<!-- 自定义切面配置start -->
	<bean id="proxy"
		class="cn.kiiwii.framework.spring.TestSpring.springwithjdbc.proxy.MyProxy">
	</bean>
	<aop:config>
		<!-- 设置自定义的切面 -->
		<aop:pointcut id="pc" expression="execution(* cn.kiiwii.framework.spring.TestSpring.springwithjdbc.service.impl.*.*(..))" />
		<aop:aspect ref="proxy">
			<aop:before pointcut-ref="pc" method="breforPerformance" />
			<aop:after pointcut-ref="pc" method="afterPerformance" />
			<aop:around pointcut-ref="pc" method="aroundMethod" />
		</aop:aspect>
	</aop:config>
	<!-- 自定义切面配置 end -->


	<!-- 性能监控的切面配置 -->
	<!-- <bean id="performanceMonitor" class="org.springframework.aop.interceptor.PerformanceMonitorInterceptor"> 
		</bean> <aop:config> <aop:pointcut id="allServiceMethods" expression="execution(* 
		cn.kiiwii.framework.service.impl.*.*(..))" /> <aop:advisor pointcut-ref="allServiceMethods" 
		advice-ref="performanceMonitor" order="2" /> </aop:config> -->
	<!-- 性能监控的切面配置 end -->

	<!-- 事务配置 start -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource">
		</property>
	</bean>

	<tx:advice id="txadvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="transfer*" propagation="REQUIRED" />
			<tx:method name="upgrade*" propagation="REQUIRED" />
			<tx:method name="change*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* cn.kiiwii.framework.spring.TestSpring.springwithjdbc.service.impl.*.*(..))"
			id="txpointcut" />
		<aop:advisor advice-ref="txadvice" pointcut-ref="txpointcut" />
	</aop:config>

	<!-- 事务配置 end -->


	<!-- 强制使用cglib代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

</beans>